name: Release Docker HUB 

on:
  release:
    types:
      - published  # release가 퍼블리시될 때만 트리거
    tags:
      - 'v*.*.*'  # 'v'로 시작하는 태그만 트리거
   
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'  # JDK 분포 설정       

      - name: Set environment variables
        run: |
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> $GITHUB_ENV
          echo "S3_REGION=${{ secrets.S3_REGION }}" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_ENV 

      - name: Extract tag name
        run: |
          echo "Full reference: $GITHUB_REF"  # 전체 참조 정보 출력
          TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\///')  # "refs/tags/v1.0.0"에서 "v1.0.0" 추출
          echo "Tag name: $TAG_NAME"  # 추출된 태그 이름 출력    
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV  # 환경 변수로 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

        #통합테스트

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Run mysql
        run: |
           docker compose -f ./docker-compose-it-test.yml up -d mysql

      - name: Run Redis
        run: |
           docker compose -f ./docker-compose-it-test.yml up -d redis-master-1    

      - name: Wait for DB
        run: |
          sleep 10  # 적절한 대기 시간 설정

      - name: Run IT Tests
        run: |
          docker-compose -f ./docker-compose-it-test.yml up --abort-on-container-exit backend_match1    # 컨테이너 빌드 및 실행
          # 테스트가 실패한 경우에 워크플로우를 실패로 처리
          if [ $? -ne 0 ]; then
          echo "IT tests failed, stopping workflow."
          exit 1
          fi          

      - name: Login Docker
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


      # 이미지 빌드
      - name: BACKEND-MATCH Image Build
        run: |
          docker build -f ./backend/Dockerfile-match-deploy -t kimyong120413/randchatbackendmatch:$TAG_NAME .
          docker push kimyong120413/randchatbackendmatch:$TAG_NAME

     
      - name: BACKEND-MEMBER Image Build
        run: |
          docker build -f ./backend/Dockerfile-member-deploy -t kimyong120413/randchatbackendmember:$TAG_NAME .
          docker push kimyong120413/randchatbackendmember:$TAG_NAME

    
      - name: FRONT-END Image Build
        run: |
          docker build -f ./frontend/Dockerfile-deploy -t kimyong120413/randchatfrontend:$TAG_NAME .
          docker push kimyong120413/randchatfrontend:$TAG_NAME
 
      - name: NGINX IMAGE BUILD
        run: |
          docker build \ 
            --build-arg BACKEND_INSTANCE_MEMBER_1=${{ secrets.BACKEND_INSTANCE_MEMBER_1 }} \
            --build-arg BACKEND_INSTANCE_MATCH_1=${{ secrets.BACKEND_INSTANCE_MATCH_1 }} \
            --build-arg BACKEND_INSTANCE_MATCH_2=${{ secrets.BACKEND_INSTANCE_MATCH_2 }} \         
            --build-arg FRONT_END_INSTANCE_1=${{ secrets.FRONT_END_INSTANCE_1 }} \        
          -f ./nginx/deploy/Dockerfile -t kimyong120413/randchatnginx:latest . 
          docker push kimyong120413/randchatnginx:latest         
