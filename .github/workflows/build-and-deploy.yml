name: Release Docker HUB 

on:
  release:
    types:
      - published  # release가 생성될 때
      - edited
    tags:
      - 'v*.*.*'  # 'v'로 시작하는 태그만 트리거

jobs:
  build:
    runs-on: ubuntu-latest
    
    if: github.event.release.target_commitish == 'main'  # main 브랜치를 참조하는 Release만 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'  # JDK 분포 설정       

      - name: Set environment variables -----환경변수 세팅-------
        run: |
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> $GITHUB_ENV
          echo "S3_REGION=${{ secrets.S3_REGION }}" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_ENV 

      - name: Extract tag name   -----태그추출-----
        run: |
          echo "Full reference: $GITHUB_REF"  # 전체 참조 정보 출력
          TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\///')  # "refs/tags/v1.0.0"에서 "v1.0.0" 추출
          echo "Tag name: $TAG_NAME"  # 추출된 태그 이름 출력    
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV  # 환경 변수로 설정

      - name: Set up Docker Buildx  ----도커 셋업----
        uses: docker/setup-buildx-action@v2

        #통합테스트

      - name: Install Docker Compose ----도커 컴포즈설치-----
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Run mysql ----통합테스트를 위한 mysql컨테이너 RUN---
        run: |
           docker compose -f ./docker-compose-it-test.yml up -d mysql

      - name: Run Redis ----통합테스트를 위한 redis컨테이너 RUN---
        run: |
           docker compose -f ./docker-compose-it-test.yml up -d redis-master-1    

      - name: Wait for DB ----통합테스트 대기중....---
        run: |
          sleep 10  # 적절한 대기 시간 설정

      - name: Run IT Tests  ----통합테스트---
        run: |
          docker-compose -f ./docker-compose-it-test.yml up --abort-on-container-exit backend_match1    # 컨테이너 빌드 및 실행
          # 테스트가 실패한 경우에 워크플로우를 실패로 처리
          if [ $? -ne 0 ]; then
          echo "IT tests failed, stopping workflow."
          exit 1
          fi          

      - name: Login Docker  ----도커로그인----
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin


      # 이미지 빌드
      - name: BACKEND-MATCH Image Build ----매칭 서버 이미지빌드---
        run: |
          docker build -f ./backend/Dockerfile-match-deploy -t kimyong120413/randchatbackendmatch:$TAG_NAME .
          docker push kimyong120413/randchatbackendmatch:$TAG_NAME

     
      - name: BACKEND-MEMBER Image Build  ----맴버 서버 이미지빌드---
        run: |
          docker build -f ./backend/Dockerfile-member-deploy -t kimyong120413/randchatbackendmember:$TAG_NAME .
          docker push kimyong120413/randchatbackendmember:$TAG_NAME

    
      - name: FRONT-END Image Build ----프론트엔드 서버 이미지빌드---
        run: |
          docker build -f ./frontend/Dockerfile-deploy -t kimyong120413/randchatfrontend:$TAG_NAME .
          docker push kimyong120413/randchatfrontend:$TAG_NAME
 
      - name: NGINX IMAGE BUILD ----엔진엑스 서버 이미지빌드---
        run: |
          docker build \
            --build-arg BACKEND_INSTANCE_MEMBER_1=${{ secrets.BACKEND_INSTANCE_MEMBER_1 }} \
            --build-arg BACKEND_INSTANCE_MATCH_1=${{ secrets.BACKEND_INSTANCE_MATCH_1 }} \
            --build-arg BACKEND_INSTANCE_MATCH_2=${{ secrets.BACKEND_INSTANCE_MATCH_2 }} \
            --build-arg FRONT_END_INSTANCE_1=${{ secrets.FRONT_END_INSTANCE_1 }} \
            -f ./nginx/deploy/Dockerfile -t kimyong120413/randchatnginx:latest .
          docker push kimyong120413/randchatnginx:latest         


      #배포 

      # - name: Set up Docker Buildx ----도커 셋업---
      #   uses: docker/setup-buildx-action@v2

      - name: Set up SSH key  ----배포를 위한 SSHKEY----
        run: |
          # SSH 디렉토리 생성
          mkdir -p ~/.ssh
          
          # SSH 키를 임시 파일로 저장
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # SSH를 통한 EC2 인스턴스 호스트 검증을 위해 known_hosts에 추가
          ssh-keyscan -H ${{ secrets.NGINX_INSTANCE_1 }} >> ~/.ssh/known_hosts

      - name: Connect to EC2 and deploy NGINX ----NGINX 배포----
        env:
          NGINX_INSTANCE_1: ${{ secrets.NGINX_INSTANCE_1 }}  # EC2 퍼블릭 IP
        run: |
          # EC2에 SSH 연결 후 Docker 이미지 풀 및 실행
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$NGINX_INSTANCE_1 << EOF
          # 기존 컨테이너 종료 (이미 실행 중이면)
          docker-compose down
          sudo systemctl restart docker
          docker system prune -a -f --volumes
          # 새로운 버전으로 컨테이너 실행
          docker compose up --build -d
          EOF

      - name: Connect to EC2 and deploy FRONT-END ----프론트엔드 배포----
        env:
          FRONTEND_INSTANCE_1: ${{ secrets.FRONT_END_INSTANCE_1 }}  # EC2 퍼블릭 IP
        run: |
          # EC2에 SSH 연결 후 Docker 이미지 풀 및 실행
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$FRONTEND_INSTANCE_1 << EOF
          # 기존 컨테이너 종료 (이미 실행 중이면)
          docker stop front-end || true
          docker rm front-end || true
          sudo systemctl restart docker
          docker system prune -a -f --volumes
          docker pull kimyong120413/randchatfrontend:$TAG_NAME
          docker run -d --name front-end -p 8080:3000  kimyong120413/randchatfrontend:$TAG_NAME
          EOF

      - name: Connect to EC2 and deploy BACK-END-MEMBER ----멤버 서버 배포----
        env:
          BACKEND_INSTANCE_MEMBER_1: ${{ secrets.BACKEND_INSTANCE_MEMBER_1 }}  # EC2 퍼블릭 IP
          ELC_HOST: ${{ secrets.ELC_HOST }}
          ELC_PORT: ${{ secrets.ELC_PORT }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          RDS_MASTER_PWD: ${{ secrets.RDS_MASTER_PWD }}
          RDS_MASTER_URL: ${{ secrets.RDS_MASTER_URL }}
          RDS_MASTER_USERNAME: ${{ secrets.RDS_MASTER_USERNAME }}
          RDS_READ_PASSWORD: ${{ secrets.RDS_READ_PASSWORD }}
          RDS_READ_URL: ${{ secrets.RDS_READ_URL }}
          RDS_READ_USERNAME: ${{ secrets.RDS_READ_USERNAME }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          STOMP_EMAIL: ${{ secrets.STOMP_EMAIL }}
          STOMP_PWD: ${{ secrets.STOMP_PWD }}
        run: |
          # EC2에 SSH 연결 후 Docker 이미지 풀 및 실행
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$BACKEND_INSTANCE_MEMBER_1 << EOF
          # 기존 컨테이너 종료 (이미 실행 중이면)
          docker stop back-end-member || true
          docker rm back-end-member || true
          sudo systemctl restart docker
          docker system prune -a -f --volumes
          docker pull kimyong120413/randchatbackendmember:$TAG_NAME
          docker run -d --name back-end-member -p 8080:8080  kimyong120413/randchatfrontend:$TAG_NAME \
            -e ELC_HOST=$ELC_HOST \
            -e ELC_PORT=$ELC_PORT \
            -e JWT_SECRET_KEY=$JWT_SECRET_KEY \
            -e RDS_MASTER_PWD=$RDS_MASTER_PWD \
            -e RDS_MASTER_URL=$RDS_MASTER_URL \
            -e RDS_MASTER_USERNAME=$RDS_MASTER_USERNAME \
            -e RDS_READ_PASSWORD=$RDS_READ_PASSWORD \
            -e RDS_READ_URL=$RDS_READ_URL \
            -e RDS_READ_USERNAME=$RDS_READ_USERNAME \
            -e S3_ACCESS_KEY=$S3_ACCESS_KEY \
            -e RDS_READ_USERS3_REGIONNAME=$S3_REGION \
            -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
            -e S3_SECRET_KEY=$S3_SECRET_KEY \
            -e STOMP_EMAIL=$STOMP_EMAIL \
            -e STOMP_PWD=$STOMP_PWD \
            -e SPRING_PROFILES_ACTIVE=deploy
          EOF

      - name: Connect to EC2 and deploy BACK-END-MATCH ----매칭 서버1 배포----
        env:
          BACKEND_INSTANCE_MATCH_1: ${{ secrets.BACKEND_INSTANCE_MATCH_1 }}  # EC2 퍼블릭 IP
          ELC_HOST: ${{ secrets.ELC_HOST }}
          ELC_PORT: ${{ secrets.ELC_PORT }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          RDS_MASTER_PWD: ${{ secrets.RDS_MASTER_PWD }}
          RDS_MASTER_URL: ${{ secrets.RDS_MASTER_URL }}
          RDS_MASTER_USERNAME: ${{ secrets.RDS_MASTER_USERNAME }}
          RDS_READ_PASSWORD: ${{ secrets.RDS_READ_PASSWORD }}
          RDS_READ_URL: ${{ secrets.RDS_READ_URL }}
          RDS_READ_USERNAME: ${{ secrets.RDS_READ_USERNAME }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          STOMP_EMAIL: ${{ secrets.STOMP_EMAIL }}
          STOMP_PWD: ${{ secrets.STOMP_PWD }}
        run: |
          # EC2에 SSH 연결 후 Docker 이미지 풀 및 실행
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$BACKEND_INSTANCE_MATCH_1 << EOF
          # 기존 컨테이너 종료 (이미 실행 중이면)
          docker stop back-end-match || true
          docker rm back-end-match || true
          sudo systemctl restart docker
          docker system prune -a -f --volumes
          docker pull kimyong120413/randchatbackendmatch:$TAG_NAME
          docker run -d --name back-end-match -p 8080:8080  kimyong120413/randchatbackendmatch:$TAG_NAME \
            -e ELC_HOST=$ELC_HOST \
            -e ELC_PORT=$ELC_PORT \
            -e JWT_SECRET_KEY=$JWT_SECRET_KEY \
            -e RDS_MASTER_PWD=$RDS_MASTER_PWD \
            -e RDS_MASTER_URL=$RDS_MASTER_URL \
            -e RDS_MASTER_USERNAME=$RDS_MASTER_USERNAME \
            -e RDS_READ_PASSWORD=$RDS_READ_PASSWORD \
            -e RDS_READ_URL=$RDS_READ_URL \
            -e RDS_READ_USERNAME=$RDS_READ_USERNAME \
            -e S3_ACCESS_KEY=$S3_ACCESS_KEY \
            -e RDS_READ_USERS3_REGIONNAME=$S3_REGION \
            -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
            -e S3_SECRET_KEY=$S3_SECRET_KEY \
            -e STOMP_EMAIL=$STOMP_EMAIL \
            -e STOMP_PWD=$STOMP_PWD \
            -e SPRING_PROFILES_ACTIVE=deploy
          EOF

      - name: Connect to EC2 and deploy BACK-END-MATCH ----매칭 서버2 배포----
        env:
          BACKEND_INSTANCE_MATCH_2: ${{ secrets.BACKEND_INSTANCE_MATCH_2 }}  # EC2 퍼블릭 IP
          ELC_HOST: ${{ secrets.ELC_HOST }}
          ELC_PORT: ${{ secrets.ELC_PORT }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          RDS_MASTER_PWD: ${{ secrets.RDS_MASTER_PWD }}
          RDS_MASTER_URL: ${{ secrets.RDS_MASTER_URL }}
          RDS_MASTER_USERNAME: ${{ secrets.RDS_MASTER_USERNAME }}
          RDS_READ_PASSWORD: ${{ secrets.RDS_READ_PASSWORD }}
          RDS_READ_URL: ${{ secrets.RDS_READ_URL }}
          RDS_READ_USERNAME: ${{ secrets.RDS_READ_USERNAME }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_REGION: ${{ secrets.S3_REGION }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
          STOMP_EMAIL: ${{ secrets.STOMP_EMAIL }}
          STOMP_PWD: ${{ secrets.STOMP_PWD }}
        run: |
          # EC2에 SSH 연결 후 Docker 이미지 풀 및 실행
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$BACKEND_INSTANCE_MATCH_2 << EOF
          # 기존 컨테이너 종료 (이미 실행 중이면)
          docker stop back-end-match || true
          docker rm back-end-match || true
          sudo systemctl restart docker
          docker system prune -a -f --volumes
          docker pull kimyong120413/randchatbackendmatch:$TAG_NAME
          docker run -d --name back-end-match -p 8080:8080  kimyong120413/randchatbackendmatch:$TAG_NAME \
            -e ELC_HOST=$ELC_HOST \
            -e ELC_PORT=$ELC_PORT \
            -e JWT_SECRET_KEY=$JWT_SECRET_KEY \
            -e RDS_MASTER_PWD=$RDS_MASTER_PWD \
            -e RDS_MASTER_URL=$RDS_MASTER_URL \
            -e RDS_MASTER_USERNAME=$RDS_MASTER_USERNAME \
            -e RDS_READ_PASSWORD=$RDS_READ_PASSWORD \
            -e RDS_READ_URL=$RDS_READ_URL \
            -e RDS_READ_USERNAME=$RDS_READ_USERNAME \
            -e S3_ACCESS_KEY=$S3_ACCESS_KEY \
            -e RDS_READ_USERS3_REGIONNAME=$S3_REGION \
            -e S3_BUCKET_NAME=$S3_BUCKET_NAME \
            -e S3_SECRET_KEY=$S3_SECRET_KEY \
            -e STOMP_EMAIL=$STOMP_EMAIL \
            -e STOMP_PWD=$STOMP_PWD \
            -e SPRING_PROFILES_ACTIVE=deploy
          EOF
