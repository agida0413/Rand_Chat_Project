name: DEPLOY

on:
  release:
    types:
      - published 
    tags:
      - 'v*.*.*'  # 'v'로 시작하는 태그만 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'  # JDK 분포 설정       

      - name: Set environment variables
        run: |
          echo "S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "S3_SECRET_KEY=${{ secrets.S3_SECRET_KEY }}" >> $GITHUB_ENV
          echo "S3_REGION=${{ secrets.S3_REGION }}" >> $GITHUB_ENV
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> $GITHUB_ENV 

      - name: Extract tag name
        run: |
          echo "Full reference: $GITHUB_REF"  # 전체 참조 정보 출력
          TAG_NAME=$(echo $GITHUB_REF | sed 's/refs\/tags\/deploy-//')  
          echo "Tag name: $TAG_NAME"  # 추출된 태그 이름 출력    
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV  # 환경 변수로 설정

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up SSH key
        run: |
          # SSH 디렉토리 생성
          mkdir -p ~/.ssh
          
          # SSH 키를 임시 파일로 저장
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # SSH를 통한 EC2 인스턴스 호스트 검증을 위해 known_hosts에 추가
          ssh-keyscan -H ${{ secrets.NGINX_INSTANCE_1 }} >> ~/.ssh/known_hosts

      - name: Connect to EC2 and deploy Docker image
        env:
          NGINX_INSTANCE_1: ${{ secrets.NGINX_INSTANCE_1 }}  # EC2 퍼블릭 IP
        run: |
          # EC2에 SSH 연결 후 Docker 이미지 풀 및 실행
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@$NGINX_INSTANCE_1 << EOF

          # 기존 컨테이너 종료 (이미 실행 중이면)
          docker-compose down 

          sudo systemctl restart docker

          docker system prune -a -f --volumes

          # 새로운 버전으로 컨테이너 실행
          docker compose up --build -d
          EOF
